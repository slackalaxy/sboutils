#!/bin/bash
#
# sboask (sboutils)
#
# Copyright (c) 2022 Petar Petrov, slackalaxy at gmail dot com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#

. /etc/sboutils.conf

SBO_SYNC="no"
SBO_INFO="no"
SBO_DIFF="no"
SBO_DEPS="no"
SBO_DEPENDENTS="no"
SBO_FIND="no"
SBO_KEY="no"
SBO_ISINST="no"
SBO_VERBOSE="no"
SBO_INSTALLED="no"
SBO_FOOTPRINT="no"

check_settings() {
	if [ ! "$RELEASE" ]; then
		echo "'RELEASE' not specified in /etc/sboutils.conf."
		exit 1
	elif [ ! "$REPO" ]; then
		echo "'REPO' not specified in /etc/sboutils.conf."
		exit 1
	fi
}

check_folder() {
	if [ ! -d $1 ]; then
		echo "Folder '$1' does not exist."
		exit 1
	elif [ ! -w $1 ]; then
		echo "Folder '$1' not writable."
		exit 1
	elif [ ! -x $1 ] || [ ! -r $1 ]; then
		echo "Folder '$1' not readable."
		exit 1
	fi
}

is_input_empty(){
	if [ -z "$1" ]; then
		echo "Input is empty. Use <`basename $0` help> for options."
		exit 1
	fi
}

sync_with_repo(){
	check_folder $SYNC
	rsync -av $URL $SYNC 
}

check_location(){
	CATEGORY=$(grep "/${1}$" $REPO/SLACKBUILDS.TXT | grep "SLACKBUILD LOCATION" | awk -F'[//]' '{print $2}')
	LOCATION=$CATEGORY/$1
}

check_location_exit(){
	if [ -z "$CATEGORY" ] ; then
		echo "$1 not found on SlackBuilds.org."
		exit 1
	fi
}

slackdesc_print(){
	handy_ruler="|-----handy-ruler------------------------------------------------------|"
	slackdesc=""
	slackdesc=$(sed -n "/$handy_ruler/{n;p;}" $1 | awk -F'[()]' '{print $2}' )
}

search_entry(){
	
	local -n SEARCH_ARRAY=$1
	
	search_array=""
	
	for k in ${SEARCH_ARRAY[@]}; do
		search_array+=( "$(cat $REPO/SLACKBUILDS.TXT | grep "/${k}$" | grep LOCATION | sed "s|SLACKBUILD LOCATION: ./||") " )
	done
	
	# sort by category
	IFS=$'\n' search_array_sorted=($(sort <<<"${search_array[*]}"))
	unset IFS
	
	# TODO: make this into a searched_status function
	for a in ${search_array_sorted[@]}; do
		if [ "$SBO_VERBOSE" = "yes" ]; then
			slackdesc_print $REPO/$a/slack-desc
			echo "$a ($slackdesc)"
		else
			echo "$a"
		fi	
	done
}

name_search(){
	FIND_array=( "$( cat $REPO/SLACKBUILDS.TXT | grep "SLACKBUILD LOCATION" | sed "s|SLACKBUILD LOCATION:||g" | awk -F  "/" '{print $3}' | grep -i "${1}")" )
	if [ ${#FIND_array[0]} = "0" ]; then
		echo "No matches found."
		exit 0
	fi
	search_entry FIND_array
}

keywords_search(){
	read -r -d '' -a KEYWORDS_ARRAY < <(grep "${1}" $REPO/TAGS.txt | awk '{print $1}' | sed "s|:||g")
	if [ ${#KEYWORDS_ARRAY[0]} = "0" ]; then
		echo "No matches found."
		exit 0
	fi
	search_entry KEYWORDS_ARRAY
}

display_info(){
	. $REPO/$LOCATION/$1.info
	keywords=$(grep -i -w "${1}:" $REPO/TAGS.txt | sed "s|${1}: ||g" | sed "s|${1}:||g" | sed "s|,|, |g")
	echo ""
	echo "Name:     $PRGNAM"
	echo "Version:  $VERSION"
	echo "Category: $CATEGORY"
	echo "Homepage: $HOMEPAGE"
	echo ""
	cat $REPO/$LOCATION/README
	echo ""
	echo "Keywords: $keywords"
	echo ""
}

source_and_md5sum(){
	local -n local_array_download=$1 # ARRAY_DOWNLOAD(_x86_64)
	local -n local_array_md5sum=$2 # ARRAY_MD5SUM(_x86_64)
	
	for (( d=0; d<${#local_array_download[@]}; d++ )); do
		NAME_d=$(basename ${local_array_download[$d]} | sed 's:%20:\ :g')
		echo -e "${local_array_md5sum[$d]} | $NAME_d"
	done
	echo ""
}

display_sources(){
	if [ ! "$DOWNLOAD_x86_64" ]; then
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
		echo "--- sources (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD ARRAY_MD5SUM
	fi
	if [ "$DOWNLOAD" != "UNSUPPORTED" ] && [ ! -z $DOWNLOAD_x86_64 ]; then
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
		echo "--- sources 32bit (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD ARRAY_MD5SUM
	fi
	if [ "$DOWNLOAD_x86_64" != "UNSUPPORTED" ] && [ "$DOWNLOAD_x86_64" != "UNTESTED" ] && [ ! -z "$DOWNLOAD_x86_64" ]; then
		read -r -d '' -a ARRAY_DOWNLOAD_x86_64 < <( echo "$DOWNLOAD_x86_64" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM_x86_64 < <( echo "$MD5SUM_x86_64" && printf '\0' )
		echo "--- sources 64bit (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD_x86_64 ARRAY_MD5SUM_x86_64
	fi
}

display_maintainer(){
	echo -e "Maintainer: $MAINTAINER ($EMAIL)\n"
}

show_installed_package(){
	sbp_installed=""
	sbo_list_all=$(find /var/log/packages/ -name "${1}-*")
	if [ ! -z "$sbo_list_all" ]; then
		for t in $(ls -1 /var/log/packages/${1}-*); do
			if [ -n "$(echo $t |rev |cut -d/ -f1 |cut -d- -f4- |rev |grep ${1}$)" ]; then
				sbp_installed+=$(echo "$t " | sed "s:/var/log/packages/::" | sed "s:_SBo::")
			fi
		done
	fi
}

list_searched(){
	local p=${1}
	VERSION=""
	BUILD=""
	show_installed_package $p
	installed_array=( $sbp_installed )
	
	if [ "${#installed_array[@]}" -eq "0" ]; then
		searched_status "[ ]" "$p"
 	elif [ "${#installed_array[@]}" -gt "1" ]; then
 		searched_status "[e]" "$p"
	elif [ "${#installed_array[@]}" -eq "1" ]; then
		sbp_array=( ${installed_array[0]//-/ } )
		sbp_name=${installed_array[0]%-*-*-*}
		sbp_build=${sbp_array[-1]}
		sbp_version=${sbp_array[-3]}
		#echo "[i] $sbp_name ($sbp_version) <$sbp_build>"
		check_location $sbp_name
		if [[ -d "$REPO/$LOCATION" ]]; then
 			source <(grep 'VERSION=${VERSION:' $REPO/$LOCATION/${sbp_name}.SlackBuild)
 			source <(grep 'BUILD=${BUILD:' $REPO/$LOCATION/${sbp_name}.SlackBuild)
			if [ "$VERSION" = "$sbp_version" ] && [ "$BUILD" = "$sbp_build" ]; then
				searched_status "[i]" "$sbp_name"
			else
				searched_status "[u]" "$sbp_name"
				# UPDATE_${sbp_name}="yes"
			fi
		fi
	fi
}

list_upgrades(){
	sysup_list+=""
	local p=${1}
	VERSION=""
	BUILD=""
	show_installed_package $p
	installed_array=( $sbp_installed )
	if [ "${#installed_array[@]}" -eq "0" ]; then
		searched_status "[ ]" "$p"
 	elif [ "${#installed_array[@]}" -gt "1" ]; then
 		searched_status "[e]" "$p"
	elif [ "${#installed_array[@]}" -eq "1" ]; then
		sbp_array=( ${installed_array[0]//-/ } )
		sbp_name=${installed_array[0]%-*-*-*}
		sbp_build=${sbp_array[-1]}
		sbp_version=${sbp_array[-3]}
		#echo "[i] $sbp_name ($sbp_version) <$sbp_build>"
		check_location $sbp_name
		if [[ -d "$REPO/$LOCATION" ]]; then
 			source <(grep 'VERSION=${VERSION:' $REPO/$LOCATION/${sbp_name}.SlackBuild)
 			source <(grep 'BUILD=${BUILD:' $REPO/$LOCATION/${sbp_name}.SlackBuild)
			if [ "$VERSION" != "$sbp_version" ] || [ "$BUILD" != "$sbp_build" ]; then
				searched_status "[u]" "$sbp_name" "$sbp_version" "$sbp_build" "$VERSION" "$BUILD"
				sysup_list+="$sbp_name "
				#UPDATE_${sbp_name}="yes"
			fi
		fi
	fi
}

searched_status(){
	if [ "$SBO_VERBOSE" = "yes" ]; then
		# call <check_location> from withing whatever uses <searched_status>
		check_location $2
		if [ -f $REPO/$LOCATION/slack-desc ]; then
			slackdesc_print $REPO/$LOCATION/slack-desc
			echo "$1 $2 ($slackdesc)"
		else
			echo "$1 $2"
		fi
	elif [ "$SBO_DIFF" = "yes" ]; then
		echo "$1 $2 $3-$4 --> $5-$6"
	else
		echo "$1 $2"
	fi
}

display_requires(){
	requires_array=( $REQUIRES )
	for d in ${requires_array[@]}; do
		list_searched $d
		#list_status $d
	done
}

# we do not need hoorex anymore, but keep the function name...
hoorex_array(){
	hoorex=""
	if [ "$2" = "DEPS" ]; then
		# grep 9 rows after
		hoorex=$(grep "NAME: $1" $SYNC/$RELEASE/SLACKBUILDS.TXT -A 9 | grep "REQUIRES:" | sed "s|SLACKBUILD REQUIRES: ||g")
		hoorex+=" $1"

	else
		# grep 8 rows before
		hoorex="$1 "
		# https://phoenixnap.com/kb/grep-regex
		hoorex+=$(grep -w "REQUIRES: *.* $1" -B 8 $SYNC/$RELEASE/SLACKBUILDS.TXT | grep "SLACKBUILD NAME: " | cut -c18-)
	fi
		
	if [ -z "$hoorex" ]; then
		echo "$1 not found at SlackBuilds.org"
		exit 1
	fi
}

hoorex_output(){
	hoorex_array=( $hoorex )
	for h in ${hoorex_array[@]}; do
		list_searched $h
	done
}

list_installed(){
	for i in /var/lib/pkgtools/packages/* ; do
		if echo $i | grep -q "_SBo" ; then
			s=$(basename "${i%-*-*-*}")
			list_searched $s
		fi
	done
}

list_differences(){
	for i in /var/lib/pkgtools/packages/* ; do
		if echo $i | grep -q "_SBo" ; then
			f=$(basename "${i%-*-*-*}")
			list_upgrades $f
		fi
	done
	#echo $sysup_list
}

show_footprint(){
	local p=${1}
	show_installed_package $p
	if [ ! -z "$sbp_installed" ]; then
		installed_array=( $sbp_installed )
		sed -n '/FILE LIST/,$p' /var/log/packages/${installed_array}_SBo
	else
		echo "Package $1 not installed."
	fi
}

dependencies_title_info(){
	echo "--- status: ([i] installed, [u] update, [ ] not installed)"
}

installed_title(){
	echo "--- status: ([i] installed, [u] update)"
}

updates_title(){
	echo "--- status: ([u] update; local --> SBo)"
}

helper() {
	echo "Usage: `basename $0` [task] SlackBuild [-v]"
	echo "Tasks:"
	echo "  sync           sync with remote SlackBuilds repo"
	echo "  info           display information about a SlackBuild"
	echo "  installed      list installed packages"
	echo "  updates        list potential updates of packages"
	echo "  isinst         show if a package is installed"
	echo "  dep|depends    show dependencies chain for a SlackBuild"
	echo "  dependee       show what depends on a SlackBuild"
	echo "  find|search    search for a SlackBuild by name"
	echo "  key            search by keyword"
	echo "  footprint      show footprint of a package"
	echo "  help           print this help"
	echo "Option:"
	echo "  -v, --verbose  display short description of package"
}

options(){
	case $1 in
		sync)
			SBO_SYNC="yes"
		;;
		info)
			SBO_INFO="yes"
		;;
		installed)
			SBO_INSTALLED="yes"
		;;
		updates)
			SBO_DIFF="yes"
		;;
		isinst)
			SBO_ISINST="yes"
		;;
		dep|depends)
			SBO_DEPS="yes"
		;;
		dependee)
			SBO_DEPENDENTS="yes"
		;;
		find|search)
			SBO_FIND="yes"
		;;
		key)
			SBO_KEY="yes"
		;;
		footprint)
			SBO_FOOTPRINT="yes"
		;;
		help|-h|--help)
			helper
			exit 0
		;;
		*)
			echo "No task or task unknown. Use <`basename $0` help> for options."
			exit 1
		;;
  	esac

	# used when showing info on many packages
	case $2 in
		-v|--verbose)
			SBO_VERBOSE="yes"
		;;
	esac
	# This is used when showing info of a package
	case $3 in
		-v|--verbose)
			SBO_VERBOSE="yes"
		;;
	esac
}

main(){
	options "$@"
	
	if [ "$SBO_SYNC" = "yes" ]; then
		sync_with_repo
		exit 0
	fi
	
	if [ "$SBO_INSTALLED" = "yes" ]; then
		installed_title
		list_installed
		installed_title
		exit 0
	fi
	
	if [ "$SBO_DIFF" = "yes" ]; then
		updates_title
		list_differences
		exit 0
	fi
	
	is_input_empty "$2"

	if [ "$SBO_FIND" = "yes" ] && [ ! -z "$2" ]; then
		name_search "$2"
		exit 0
	fi
	if [ "$SBO_KEY" = "yes" ] && [ ! -z "$2" ]; then
		keywords_search "$2"
		exit 0
	fi
		
	if [ "$SBO_ISINST" = "yes" ] && [ ! -z "$2" ]; then
		list_searched "$2"
		exit 0
	fi
	
	check_location "$2"
	check_location_exit "$2"
	
	if [ "$SBO_FOOTPRINT" = "yes" ]; then
		show_footprint "$2"
		exit 0
	fi
	
	# $2 refers to position, e.g.: sboask info $2 (aka slackbuild),
	# but comes first after the function, so it is referred as $1
	# inside the corresponding functions! A note to my stupid self.
	if [ "$SBO_INFO" = "yes" ] && [ ! -z "$2" ]; then
		display_info "$2"
		if [ "$SBO_VERBOSE" = "yes" ]; then
			display_sources
			display_maintainer
		fi
		list_searched "$2"
		dependencies_title_info
		display_requires "$2"
		exit 0
	fi

	if [ "$SBO_DEPS" = "yes" ] && [ ! -z "$2" ]; then
		hoorex_array "$2" DEPS
		dependencies_title_info
		hoorex_output
		exit 0
	fi
	if [ "$SBO_DEPENDENTS" = "yes" ] && [ ! -z "$2" ]; then
		hoorex_array "$2" DEPENDENTS
		dependencies_title_info
		hoorex_output
		exit 0
	fi
	exit 0
}

check_settings
main "$@"

# End of file
